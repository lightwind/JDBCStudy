package com.light.jdbc;

import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;

/**
 * 操作JDBC的工具类
 * Version 1
 */
public class JDBCTools {

	/**
	 * 执行insert、update、delete的sql语句
	 */

	/**
	 * 关闭Statement和Connection
	 */
	public static void releaseDB(Statement statement, Connection connection) {
		if (statement != null) {
			try {
				statement.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}

		if (connection != null) {
			try {
				connection.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}

	public static void release(ResultSet resultSet, Statement statement, Connection connection) {
		if (resultSet != null) {
			try {
				resultSet.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}

		if (statement != null) {
			try {
				statement.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}

		if (connection != null) {
			try {
				connection.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}

	/**
	 * 1、获取连接的方法
	 * 通过读取配置文件从数据库服务器获取连接
	 */
	public static Connection getConnection() throws Exception {
		// 1、准备连接数据库的参数
		// a、创建Properties对象
		Properties properties = new Properties();
		// b、获取jdbc.properties对应的输入流
		InputStream in = JDBCTools.class.getClassLoader().getResourceAsStream("jdbc.properties");
		// c、加载b对应的输入流
		properties.load(in);
		// d、具体确定user等4个参数
		String user = properties.getProperty("user");
		String password = properties.getProperty("password");
		String jdbcUrl = properties.getProperty("jdbcUrl");
		String driverClass = properties.getProperty("driver");

		// 2、加载驱动
		Class.forName(driverClass);

		// 3、通过DriverManager获取数据库连接
		return DriverManager.getConnection(jdbcUrl, user, password);

	}

}
